\documentclass{article}
\usepackage{enumitem}
\usepackage{ amssymb }
\usepackage{ textcomp }
\usepackage{longtable}
\usepackage{amsmath,tabu}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{float}
\usepackage[figurename=Supplemental Figure]{caption}
\usepackage{titling}

\setlength{\droptitle}{-5em}  
\topmargin=-0.4in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9in
\headsep=0.25in

\title{Interrogation of human hematopoiesis at single-cell and single-variant resolution}
\date{Supplemental Information}
\author{ }

\begin{document}
\maketitle
\section*{Overview of UK Biobank data}


<<loadLibraries, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, eval = TRUE, cache = FALSE, results="hide">>=
library(corrplot)
library(BuenColors)
library(dplyr)
library(reshape2)
library(cowplot)
library(data.table)
library(plotly)
library(stringr)
library(ggrepel)
@

<<heritabilityPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Heritability estimates from LD Score Regression across 16 hematopoetic traits. The estimates of the narrow-sense SNP heritabilities are plotted in gray with their corresponding standard erors. Heritability estimates for all variants with fine-mapped posterior probability > 0.001 are plotted in blue for each trait, and the proportions of total narrow-sense heritability captured by these fine-mapped variants (blue bar / gray bar) are indicated by the numbered labels.", eval = TRUE, cache = FALSE, results="hide">>=

library(scales)
# Narrow-Sense Heritability Estimated Obtained from LDSC
h2 <-fread("../data/LDSC_heritability/trait_h2.txt")
colnames(h2) <- c("trait","h_obs","h_obs_se")

# Read in enrichments for FM PP001 variants
reorderedtraits=traits=c("BASO_COUNT","EO_COUNT","HCT","HGB","LYMPH_COUNT", "MCH", "MCHC", "MCV", "MEAN_RETIC_VOL","MONO_COUNT", "MPV", "NEUTRO_COUNT", "PLT_COUNT", "RBC_COUNT","RETIC_COUNT","WBC_COUNT")

ctHeme <- vector("list",length=16)
ct_enrichment <- vector("list",length=length(ctHeme))
celltypes <- paste0(traits,"_PP001L2")

FM_h2 <- NULL
FM_enrichment <- NULL
dir="../data/LDSC_heritability/FM_PP001/"
for (i in 1:length(ctHeme)){
  ctHeme[[i]]<-fread(paste0(dir,traits[i],".",celltypes[i],".results"))
  FM_h2[i] <- ctHeme[[i]]$Prop._h2[1]
  FM_enrichment[i] <- ctHeme[[i]]$Enrichment[1]
}

h2$fm_herit <- FM_h2*h2$h_obs
h2$fm_h2 <- FM_h2
h2$trait <- factor(as.character(h2$trait), rev(unique(as.character(h2$trait))))

legendtitle <- "fine-mapped heritability"
ggplot(data=h2, aes(x=trait,y=fm_herit)) +
  geom_bar(aes(y=h_obs), fill="light gray",stat="identity",position = position_stack(reverse = TRUE)) +
  geom_bar(aes(y=fm_herit,fill=legendtitle),stat="identity") +
  geom_text(aes(label=percent(FM_h2)), hjust=-0.25, color="black", size=3.25) +
  scale_fill_manual(values = c(jdb_palette("GrandBudapest2")[c(4)],jdb_palette("Zissou")[1:5])) +
  ggtitle("Finemapped Trait Heritabilities") + theme_bw() + 
  coord_flip() + 
  labs(fill="") + 
  scale_y_continuous(expand = c(0.01, 0.0)) +
  theme(plot.subtitle = element_text(vjust = 1),
        panel.background = element_rect(fill = "white", colour = "grey50"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.title.y=element_blank(),
        axis.title.x=element_blank(),
        legend.position = c(.98, 0.99),
        legend.justification = c("right", "top"),
        legend.box.just = "right",
        legend.margin = margin(1, 1, 1, 1),
        legend.direction = "vertical",
        legend.key.size = unit(0.15, "in"))  +
  geom_errorbar(aes(ymin=h_obs-h_obs_se, ymax=h_obs+h_obs_se),width=.2,position=position_dodge(.9),color="black")

@

<<correlationPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Phenotypic and genetic correlations across the 16 traits examined. ", eval = TRUE, cache = TRUE, results="hide">>=

### Phenotypic correlations
phenocors <-read.table("../data/phenotypeCorrelations/raw_phenotypes.txt",header=TRUE,row.names=1)
dissimilarity <- 1 - cor(data.matrix(phenocors))
distance <- as.dist(dissimilarity) 
reorderedtraits=traits=rownames(phenocors)[hclust(distance)$order]

phenocors <- data.matrix(phenocors[reorderedtraits,reorderedtraits])
melt_pheno <- reshape2::melt(phenocors)
melt_pheno$Var1 <- ordered(as.character(melt_pheno$Var1), ordered(traits))
melt_pheno$Var2 <- ordered(as.character(melt_pheno$Var2), ordered(rev((traits))))

p1 <- ggplot(data = melt_pheno, aes(x=Var1, y=Var2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_flare"), limits = c(-1,1)) +
  theme(plot.subtitle = element_text(vjust = 1), 
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "Pearson") +
  theme(legend.position="bottom")  + ggtitle("Phenotype Correlation")

### Constrained intercept genetic correlations
constrained_gencors <- vector(mode = "list", length = length(traits))

# Read unix files into R lists
constrained_gencors <- lapply(traits, function(y) read.table(paste0("../data/phenotypeCorrelations/ldscore/",y,"_UK10K_constrained.gcsummary.txt"),header=TRUE,row.names=NULL))

make.gc.matrix <- function(list_of_gcs,traits){
  allgencors <- bind_rows(list_of_gcs)
  allgencors$rg <- as.numeric(as.character(allgencors$rg))
  
  gc.matrix <- matrix(ncol = 16, nrow = 16, dimnames=list(traits,traits))
  pv.matrix <- matrix(ncol = 16, nrow = 16, dimnames=list(traits,traits))
  
  for (i in traits) {
    for (j in traits) {
      if (i == j){
        gc.matrix[i,j]=1
      } else {
        gc.matrix[i,j] <- allgencors[allgencors$p1 == i & allgencors$p2 == j,'rg']
        if (gc.matrix[i,j]>1) gc.matrix[i,j]=1
        pv.matrix[i,j]<- allgencors[allgencors$p1 == i & allgencors$p2 == j,'p']
      }
    }
  }
  return(list(gc.matrix,pv.matrix))
}

# Plot LD Score correlation
ldscorecor <- make.gc.matrix(constrained_gencors,traits)[[1]]
melt_phenoLD <- reshape2::melt(ldscorecor)
melt_phenoLD$Var1 <- ordered(as.character(melt_phenoLD$Var1), ordered(traits))
melt_phenoLD$Var2 <- ordered(as.character(melt_phenoLD$Var2), ordered(rev((traits))))

p2 <- ggplot(data = melt_phenoLD, aes(x=Var1, y=Var2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_flare"), limits = c(-1,1)) +
  theme(plot.subtitle = element_text(vjust = 1), 
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "LDScore Correlation  ") +
  theme(legend.position="bottom")  + ggtitle("Genetic Correlation  ")


### Compare geno and pheno correlations
phenotriangle <- phenocors
phenotriangle[lower.tri(phenotriangle, diag = FALSE)]<- 0
genotriangle <- ldscorecor
genotriangle[lower.tri(genotriangle, diag = FALSE)]<- 0

phenomelt <- melt(phenotriangle); genomelt <- melt(genotriangle); allmelt <- melt(phenocors)

genomelt$traitpairs <- paste(genomelt$Var1,genomelt$Var2)
phenomelt$traitpairs <- paste(phenomelt$Var1,phenomelt$Var2)

colnames(genomelt)[3]<- "GenoCor"
colnames(phenomelt)[3] <- "PhenoCor"
merged <- merge(genomelt,phenomelt,by="traitpairs")
merged[,c("Var1.x","Var2.x")] <- NULL
merged <- merged[merged$GenoCor != 0,]

p3 <- ggplot(merged,aes(x=GenoCor,y=PhenoCor,pairs=traitpairs)) + geom_point(aes(color=Var1.y)) + 
  scale_color_manual(values = UKBB_color_maps) + 
  pretty_plot()+ geom_smooth(method=lm)+
  geom_abline(intercept=0,slope=1) + 
  theme(plot.title = element_text(size=10,hjust = 0.5,face="bold"),
        panel.background = element_rect(fill = "white", colour = "grey50"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_x_continuous(limits = c(-1,1)) + scale_y_continuous(limits = c(-1,1))

 plot_grid(p1, p2, labels = c('A', 'B'))
@

<<pleiotropyImport, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Numbers of pleiotropic variants", eval = TRUE, cache = FALSE, results="hide">>=
 library(ggplot2)
 library(BuenColors)
  
 pleioMatch <- function(file1, file2){
   nnames <- c("chr", "start", "end", "region", "PP", "beta", "SE", "Z")
   # Import Bed and Make GRanges
   hitdf1 <- data.table::fread(as.character(file1))
   names(hitdf1) <- nnames 
   
   hitdf2 <- data.table::fread(as.character(file2))
   names(hitdf2) <- nnames 
   
   hitdf <- merge(hitdf1, hitdf2, by.x = c("chr", "start", "end"), by.y = c("chr", "start", "end"))
   oppo <- sum(sign(hitdf$beta.x) != sign(hitdf$beta.y))
   same <- sum(sign(hitdf$beta.x) == sign(hitdf$beta.y))
   return(c(oppo, same))
 }
 
 files <- list.files("../data/UKBB_BC_PP001/betas_added",  full.names = TRUE)
 pairs <- data.frame(t(combn(files, 2)), stringsAsFactors = FALSE)
 pairs$short1 <- gsub("_PP001_betas.bed", "", gsub("../data/UKBB_BC_PP001/betas_added/", "", pairs[,1]))
 pairs$short2 <- gsub("_PP001_betas.bed", "", gsub("../data/UKBB_BC_PP001/betas_added/", "", pairs[,2]))
 pairs$traits <- paste0(pairs$short1, "_", pairs$short2)
 
 hitsdf <- sapply(1:dim(pairs)[1], function(i){
   pleioMatch(pairs[i,1], pairs[i,2])
 })
 pairsdf <- data.frame(pairs, t(hitsdf))
 colnames(pairsdf) <- c(colnames(pairs), "opposite", "same")
 pairsdf <- pairsdf[,c("short1", "short2", "opposite", "same")]
 
melt_pleio <- reshape2::melt(pairsdf, id.vars = c("short1", "short2"))
melt_pleio$short1 <- ordered(as.character(melt_pleio$short1), ordered(traits))
melt_pleio$short2 <- ordered(as.character(melt_pleio$short2), ordered(rev((traits))))

mdf <- rbind(melt_pleio, setNames(melt_pleio[,c(2,1,3,4)], c("short1", "short2", "variable", "value")))
mdf$value[is.na(mdf$value)] <- 0
@

<<pleiotropyPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Numbers of pleiotropic variants", eval = FALSE, cache = FALSE, results="hide">>=
pleioplot1 <- ggplot(data = mdf[mdf$variable == "same", ], aes(x=short1, y=short2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_rojos")) +
  theme(plot.subtitle = element_text(vjust = 1), legend.text=element_text(size= 7),
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "# of Variants") +
  theme(legend.position="bottom")  + ggtitle("Same sign")
 

pleioplot2 <- ggplot(data = mdf[mdf$variable == "opposite", ], aes(x=short1, y=short2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_blues")) +
  theme(plot.subtitle = element_text(vjust = 1),  legend.text=element_text(size= 7),
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = " # of Variants") +
  theme(legend.position="bottom")  + ggtitle("Opposite sign")
 plot_grid(pleioplot1, pleioplot2, labels = c('A', 'B'))
@

<<ccnd3UK10KLD, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Fine-mapped log10(Bayes factor) values for CCND3 variants, with LD estimated from a reference panel of 3,677 individuals from the UK10K cohort.", eval = TRUE, cache = FALSE, results="hide">>=
rsid <- "rs9349205"
trait <- "RBC_COUNT"
locuszoom <- fread("../data/examples/CCND3.final_locuslist.RBC_COUNT.txt")

hardcallregion<-36
FM_hardcall_region <- fread("../data/examples/region36.snp")
FM_hardcall_region$POS <- str_split_fixed(str_split_fixed(FM_hardcall_region$snp,":",2)[,2],"_",2)[,1]
FM_hardcall_region$POS <- as.integer(as.character(FM_hardcall_region$POS))
FM_hardcall_region <- merge(locuszoom,FM_hardcall_region,by="POS")
FM_hardcall_region[FM_hardcall_region$snp_log10bf < 0,"snp_log10bf"] <- 0 
FM_hardcall_region$sentinel <- ifelse(FM_hardcall_region$RSQR ==1 | 
                                        FM_hardcall_region$SNP =="rs112233623", "yes", "no")

sz <- 1.5
width=3
locustheme <-  theme(plot.title = element_text(size=sz*4,hjust = 0.50,face="bold"),
                     text=element_text(size=sz*4),
                     axis.title.x = element_blank(),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     legend.position = c(.05, .9),
                     legend.justification = c("left", "top"),
                     legend.box.just = "left",
                     legend.margin = margin(1, 1, 1, 1),
                     legend.direction = "horizontal",
                     legend.key.size = unit(width/30, "in"),
                     legend.text = element_text(size=sz*2),
                     legend.title = element_text(face="bold",size=sz*2))

# Plot FM log10bf with hard called variants labeled
ggplot(subset(FM_hardcall_region,snp_log10bf > -Inf),aes(POS/(10^6),snp_log10bf)) + geom_point(aes(fill=RSQR),shape=21,size=sz)  +
  pretty_plot()+
  scale_y_continuous(expand = c(0.05, 0))+
  scale_fill_gradientn(colors = jdb_palette("solar_extra")[-1],name="R2") +
  guides(fill=guide_colorbar(title.vjust=0.75))+
  locustheme+
  labs(x="Position on Chromosome 6 (Mb)",y="log10(Bayes factor)") + 
  geom_point(data=subset(FM_hardcall_region,sentinel=="yes"),
             aes(x=POS/(10^6),y=snp_log10bf),
             fill="yellow",shape=21,size=sz)+
  geom_text_repel(data = subset(FM_hardcall_region, sentinel=="yes"),
                   aes(label = paste(SNP,"(PP = 0.0)",sep="\n")),
                   size = sz,
                   force=TRUE,
                   nudge_x = 0.25,
                   nudge_y=1.5) 
@

<<ak3Phenos_Reporter, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Effects of AK3 variants rs409950 and rs12005199 on platelet count. (A) rs409950/rs12005199 haplotypes exert additive effects on platelet count amongst individuals from the UKBB GWAS. (B) Luciferase reporter assay corroborates additive effects of the two SNPs on transcription.", eval = TRUE, cache = FALSE, results="hide">>=

# Bar plots
rs_alleles <- fread("../data/examples/rawphenos_mixed.rs12005199_rs409950.txt")
trait <- "PLT_COUNT"
# Round imputed genotypes to nearest integer
rs_alleles_onlyabsolutes <- as.data.frame(rs_alleles)
rs_alleles_onlyabsolutes$alleleA.rs12005199 <- round(rs_alleles_onlyabsolutes$alleleA.rs12005199,0)
rs_alleles_onlyabsolutes$alleleB.rs12005199 <- 2-rs_alleles_onlyabsolutes$alleleA.rs12005199
rs_alleles_onlyabsolutes$alleleA.rs409950 <- round(rs_alleles_onlyabsolutes$alleleA.rs409950,0)
rs_alleles_onlyabsolutes$alleleB.rs409950 <- 2-rs_alleles_onlyabsolutes$alleleA.rs409950

rs_alleles_onlyabsolutes <- rs_alleles_onlyabsolutes[,c("alleleB.rs12005199","alleleB.rs409950",trait)]

# Make bar plot with mean and se of RBC_COUNT
eval_AK3 <- function(rs409950, rs409950_l, rs12005199, rs12005199_l,trait="PLT_COUNT"){
  v <- subset(rs_alleles_onlyabsolutes,alleleB.rs409950==rs409950 & alleleB.rs12005199==rs12005199)
  if (nrow(v)<10){
    v <- NULL
  }
  data.frame(name = paste0(rs409950_l, "\n", rs12005199_l), estimate = mean(v[,trait]), se = sd(v[,trait])/sqrt(length(v[,trait])))
}

AK3phenos <- rbind(
  eval_AK3(rs409950 = 2, rs409950_l = "AA", rs12005199 = 2, rs12005199_l = "AA"),
  eval_AK3(rs409950 = 1, rs409950_l = "AC", rs12005199 = 2, rs12005199_l = "AA"),
  eval_AK3(rs409950 = 0, rs409950_l = "CC", rs12005199 = 2, rs12005199_l = "AA"),
  eval_AK3(rs409950 = 2, rs409950_l = "AA", rs12005199 = 1, rs12005199_l = "AG"),
  eval_AK3(rs409950 = 1, rs409950_l = "AC", rs12005199 = 1, rs12005199_l = "AG"),
  eval_AK3(rs409950 = 0, rs409950_l = "CC", rs12005199 = 1, rs12005199_l = "AG"),
  eval_AK3(rs409950 = 2, rs409950_l = "AA", rs12005199 = 0, rs12005199_l = "GG"),
  eval_AK3(rs409950 = 1, rs409950_l = "AC", rs12005199 = 0, rs12005199_l = "GG"),
  eval_AK3(rs409950 = 0, rs409950_l = "CC", rs12005199 = 0, rs12005199_l = "GG")
)

AK3phenos <- AK3phenos[complete.cases(AK3phenos),]

limits <- c(as.numeric(quantile(rs_alleles_onlyabsolutes[,trait],0.3)),
            as.numeric(quantile(rs_alleles_onlyabsolutes[,trait],0.7)))

phenos <- ggplot(AK3phenos, aes(x = name, y = estimate)) + 
  geom_bar(stat = "identity", color = "black", fill = "firebrick")+ 
  pretty_plot() +
  geom_errorbar(aes(ymin=estimate-se, ymax=estimate+se), width=.1) +
  labs(x = "rs409950\nrs12005199", y = "Platelet Count (10^6 cells/uL)") +   coord_cartesian(ylim = limits) 


###
library(BuenColors)
library(dplyr)
library(lme4)
source("../figures/Figure2/fromLeif/r_analysis/summarySE.R")

df <- read.table("../figures/Figure2/fromLeif/r_analysis/reporter_experiments_both.txt", header = TRUE, stringsAsFactors = FALSE)
df$Experiment <- ifelse(df$Experiment == "Exp1", 0, 1)

## A/A is reference
# rs409950 alt is C; rs12005199 alt is G

AK3 <- df %>% filter(type %in% c("pGL","AK3_AA", "AK3_AG", "AK3_CA", "AK3_CG"))

AK3r <- df %>% filter(type %in% c("AK3_AA", "AK3_AG", "AK3_CA", "AK3_CG"))
AK3r$XG <- ifelse(AK3r$type %in% c("AK3_AG", "AK3_CG"),1,0)
AK3r$CX <- ifelse(AK3r$type %in% c("AK3_CA", "AK3_CG"),1,0)
AK3mod <- lm(value ~ Experiment + XG + CX + XG*CX, data = AK3r)
AK3_mmod <- lmer(value ~  XG + CX + XG*CX + (1 | Experiment), data = AK3r)

# Get empty promoter
pGL <- df %>% filter(type %in% c("pGL")) %>% summarySE(measurevar="value")

# Evaluate at the different haplotyeps
eval_AK3 <- function(rs409950, rs409950_l, rs12005199, rs12005199_l){
  v <- predict(AK3mod, data.frame(Experiment = 0, XG = rs12005199, CX = rs409950), se.fit = TRUE)
  data.frame(name =  paste0(rs409950_l, "\n", rs12005199_l), estimate = unname(v$fit), se = v$se.fit)
}

AK3plotdf <- rbind(
  data.frame(name = "pGL", estimate = pGL$value, se = pGL$se),
  eval_AK3(rs409950 = 0, rs409950_l = "A", rs12005199 = 0, rs12005199_l = "A"),
  eval_AK3(rs409950 = 1, rs409950_l = "C", rs12005199 = 0, rs12005199_l = "A"),
  eval_AK3(rs409950 = 0, rs409950_l = "A", rs12005199 = 1, rs12005199_l = "G"),
  eval_AK3(rs409950 = 1, rs409950_l = "C", rs12005199 = 1, rs12005199_l = "G")
)

ak3gg <- ggplot(AK3plotdf, aes(x = name, y = estimate)) + 
  geom_bar(stat = "identity", color = "black", fill = "firebrick") + pretty_plot() +
  geom_errorbar(aes(ymin=estimate-se, ymax=estimate+se), width=.1) +
  labs (x = "rs409950\nrs12005199", y = "Luciferase Activity (A.U.)") +
  scale_y_continuous(expand = c(0.05, 0))


 plot_grid(phenos, ak3gg, labels = c('A', 'B'))

@

\begin{figure}
\centering
\includegraphics[width=\linewidth]{staticFigures/FINEMAP_PP10_localzscore_10000.pdf}
\caption{Local z-scores for enrichment of hematopoietic nucleosome-depleted regions in the set of fine-mapped variants with posterior probability $> 0.10$.}
\end{figure} 

\begin{figure}
\centering
\includegraphics[width=\linewidth]{staticFigures/FINEMAP_enrichments_ExcludingSentinels.pdf}
\caption{Local annotation enrichments for fine-mapped variants, excluding all fine-map variants with $R^2>0.80$ to the sentinel variant of any region.}
\end{figure} 

\begin{figure}
\centering
\includegraphics[width=\linewidth]{staticFigures/UKBB_PP50_bulk.pdf}
\caption{Side-by-side heatmaps showing overlap of hematopoietic nucleosome-depleted regions by cell type with fine-mapped variants ($PP>0.50$) by trait. The two heatmaps share a common y-axis of specific variants.}
\end{figure} 

<<barplots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=9, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Hematopoetic cell type enrichments for Mean Retic Volume and Monocyte count using various methods.", eval = TRUE, cache = FALSE, results="hide">>=
df3 <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
df3$LDScore <- -log10(df3$ldscore_pvalue)
df3$`g-chromVAR` <- -log10(pnorm(df3$weighted_Zscore, lower.tail = FALSE))
df3$chromVAR <- -log10(pnorm(df3$chromVAR_Zscore, lower.tail = FALSE))
plotdfEnrich2 <- reshape2::melt(df3[df3$Trait %in% c("MEAN_RETIC_VOL", "MONO_COUNT"),c(1,2,6,8,7)],
                                id.vars = c("Celltype", "Trait"))

pEnrich1 <- ggplot(plotdfEnrich2[plotdfEnrich2$Trait == "MONO_COUNT", ],
                   aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "Monocyte Count Enrichment (-log10 p)", fill = "") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
   scale_fill_manual(values = ejc_color_maps) + facet_grid(variable ~ ., scales = "free_y") +
  theme(legend.position="none") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

pEnrich2 <- ggplot(plotdfEnrich2[plotdfEnrich2$Trait == "MEAN_RETIC_VOL", ],
                   aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  pretty_plot() + labs(x = "", y = "Mean Retic Volume Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_grid(variable ~ ., scales = "free_y") +
  theme(legend.position="bottom") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

plot_grid(pEnrich1, pEnrich2, labels = c('A', 'B'), nrow = 2, rel_heights = c(1,1.3))
@


<<allGchromvar, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from g-chromVAR. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfg <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfg$`g-chromVAR` <- -log10(pnorm(dfg$weighted_Zscore, lower.tail = FALSE))
plotdfEnrichg <- reshape2::melt(dfg[,c(1,2,6)],
                                id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichg, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "g-chromVAR Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<allchromVAR, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from chromVAR. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfg <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfg$chromVAR <- -log10(pnorm(dfg$chromVAR_Zscore, lower.tail = FALSE))
plotdfEnrichg <- reshape2::melt(dfg[,c(1,2,6)],
                                id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichg, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "chromVAR Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<allLDscore, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from LD score regression, calculated from the z-scores of the coefficients for each cell-type-specific annotation added separately to the baseline model. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfldscore <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfldscore$ldscoreP<- -log10(dfldscore$ldscore_pvalue)
plotdfEnrichLDscore <- reshape2::melt(dfldscore[,c(1,2,6)], id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichLDscore, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "LD Score Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<panhemeLDscore, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from LD score regression, calculated from coefficient z-scores after jointly adding all 18 cell-type-specific annotations to the baseline model at once. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfldscore <- read.table("../data/bulk/GWAS-Bulk/bulkHeme_baseline_panheme.txt", header = TRUE)
dfldscore$pvalue <- as.numeric(dfldscore$pvalue)
dfldscore$ldscoreP<- -log10(dfldscore$pvalue)

plotdfEnrichLDscore <- reshape2::melt(dfldscore[,c(1,2,4)], id.vars = c("Category", "trait"))
ggplot(plotdfEnrichLDscore, aes(x = Category, y = value)) +
  geom_bar(width = 1, aes(fill = Category), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "LD Score Enrichment Enrichment (-log10 p)", fill = "") +
  scale_fill_manual(values = ejc_color_maps) + facet_wrap(~trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<varyingPP, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Cell type - trait enrichments for g-chromVAR across different finemap variants posterior probability cutoffs. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=
zscoreWeighted <- readRDS("../data/supplement_rds/varyingPPcutoff.rds")
zscoreWeighted$Var2 <- gsub("_PP001", "", zscoreWeighted$Var2)
ggplot(zscoreWeighted, aes(x = PP, y = -log10(pnorm(value,lower.tail = FALSE)))) +
  geom_line(aes(color = Var1)) +
  pretty_plot() + labs(x = "Posterior Probability Threshold", y = "g-chromVAR Enrichment (-log10 p)", color = "") +
   scale_color_manual(values = ejc_color_maps) + facet_wrap(~Var2, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) 

@

<<roadmapCompute, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE, cache = FALSE, results="hide", cache = TRUE>>=

# Just a chunk for computing; not evaluated at run time
library(gchromVAR)
library(data.table)
library(chromVAR)
library(GenomicRanges)
library(SummarizedExperiment)
library(dplyr)
library(BSgenome.Hsapiens.UCSC.hg19)

peaks <- data.frame(fread(paste0("zcat < ", "roadmap_dnase/ROADMAP_DNASE.500bp.bed.gz"))) %>%
  makeGRangesFromDataFrame(seqnames.field = "V1", start.field = "V2", end.field = "V3")
counts <- data.matrix(data.frame(fread(paste0("zcat < ", "roadmap_dnase/ROADMAP_DNASE_counts.500bp.tsv.gz"))))

SE <- SummarizedExperiment(
  rowRanges = peaks,
  assays = list(counts = counts),
  colData = data.frame(samples = colnames(counts))
)
SE <- addGCBias(SE, BSgenome.Hsapiens.UCSC.hg19)

filez <- list.files("../data/UKBB_BC_PP001/", full.names = TRUE, pattern = "*.bed$")
ukbb <- importBedScore(rowRanges(SE), filez)

# Run gchromVAR
gcv <- computeWeightedDeviations(SE, ukbb)

df <- reshape2::melt(assays(gcv)[["z"]])
df$P <- pnorm(df$value, lower.tail = FALSE)
df$logP <- -log10(pnorm(df$value, lower.tail = FALSE))
df$Trait <- gsub("_PP001", "", df$Var1)

meta <- read.table("roadmap_dnase/newMetaData.txt", sep = "\t", header = TRUE,  comment.char = "")
cn <- meta[,"EDACC_NAME"]
names(cn) <- meta[,1]

df$celltype <- cn[df$Var2]
df <- df[order(df$P),]
df$expected <- -log10( stats::ppoints(dim(df)[1]) )
saveRDS(df, file = "roadmap_dnase/deviationDataframe.rds")
@

<<binaryPeakCompute, message = FALSE, warning = FALSE, echo = FALSE, eval = FALSE, cache = FALSE, results="hide", cache = TRUE>>=
library(chromVAR)
library(gchromVAR)
library(SummarizedExperiment)
library(data.table)
library(GenomicRanges)
library(BSgenome.Hsapiens.UCSC.hg19)
library(reshape2)
library(diffloop)
library(Matrix)
library(BuenColors)

# For the bulk, import binarized peaks
peaksdf <- fread("../data/bulk/ATAC/29August2017_EJCsamples_allReads_500bp.bed")
peaks <- makeGRangesFromDataFrame(peaksdf, seqnames = "V1", start.field = "V2", end.field = "V3")

fullnp <- list.files("../data/bulk/ATAC/narrowpeaks", full.names = TRUE)
short <- gsub("_peaks.narrowPeak.gz", "", list.files("../data/bulk/ATAC/narrowpeaks"))

sapply(1:length(short), function(i){
  dt <- data.frame(fread(paste0("zcat < ",fullnp[i])))
  g <- makeGRangesFromDataFrame(dt, seqnames = "V1", start.field = "V2", end.field = "V3")
  v <- 1:length(peaks) %in% subjectHits(findOverlaps(peaks, g))
  v
}) -> counts
dim(counts)
colnames(counts) <- short

SE <- SummarizedExperiment(assays = list(counts = counts),
                               rowData = peaks, 
                               colData = DataFrame(names = colnames(counts)))
SE <- addGCBias(SE, genome = BSgenome.Hsapiens.UCSC.hg19)
SE <- filterPeaks(SE)
ukbb <- importBedScore(rowRanges(SE), list.files("../data/UKBB_BC_PP001/", full.names = TRUE, pattern = "*.bed$"))

# Compute weighted deviation scores
binPeakDev <- computeWeightedDeviations(SE, ukbb)
zscoreBinPeak <- melt(t(assays(binPeakDev)[["z"]]))
zscoreBinPeak[,2] <- gsub("_PP001", "", zscoreBinPeak[,2])

zscoreBinPeak$P <- pnorm(zscoreBinPeak$value, lower.tail = FALSE)
zscoreBinPeak$logP <- -log10(pnorm(zscoreBinPeak$value, lower.tail = FALSE))
saveRDS(zscoreBinPeak, file = "othertempdata/binaryPeakZscore.rds")
@

<<binarizedPeakPlot, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Results of trait/cell type enrichments across hematopoesis using binarized peaks. These results demonstrate the importance of accounting for quantitative chromatin values in peaks to be powered for detecting enriched cell types and traits.", eval = TRUE, cache = FALSE, results="hide">>=
library(BuenColors)

zscoreBinPeak <- readRDS("othertempdata/binaryPeakZscore.rds")
ggplot(zscoreBinPeak, aes(x = Var1, y = logP)) +
  geom_bar(width = 1, aes(fill = Var1), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "Binarized Peak Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Var2, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*18)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

@

<<roadmapPlot, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=5, fig.cap="QQplot of observed and expected enrichments using DNase hypersensitivity data and identical pre-processing for 53 tissue types from Roadmap. The top eight pairs of cell types and traits are annotated on the plot where 35 total pairs passed Bonferroni-adjusted significance. ", eval = TRUE, cache = FALSE, results="hide">>=
library(BuenColors)
library(ggrepel)

df <- readRDS("roadmap_dnase/deviationDataframe.rds")
df$Color <- (ifelse(df$celltype == "CD8_Memory_Primary_Cells",1,0) + 
  ifelse(df$celltype %in% c("HUES64_Cell_Line", "HUES6_Cell_Line", "HUES48_Cell_Line"),2,0) +
   ifelse(df$celltype == "IMR90_Cell_Line",3,0) ) * ifelse(df$P < 0.05/dim(df)[1],1,0) + 1
tv <-  c("Other", "CD8", "HESC", "IMR90")
df$ColorType <- factor(tv[df$Color], levels = tv)
df$CellTrait <- paste0(df$ColorType, " ", df$Trait)                       
p <- ggplot(df, aes(x = expected, y = logP, color = ColorType)) +
  geom_point() +
  scale_color_manual(values = c("black", "#001588", "green", "purple4")) +
  geom_hline(yintercept = -log10(0.05/dim(df)[1]), linetype = 2) +
  geom_abline(slope=1, intercept=0) + pretty_plot() +
  labs(x = "Expected -log10(p)", y = "Observed g-chromVAR -log10(p)", color = "") +
  theme(legend.position = "bottom")
gglabeller_data <- p$data
gglabeller_data$gglabeller_labels <- df$CellTrait
gglabeller_data[c(9:848),'gglabeller_labels'] <- ''
p + geom_text_repel(data = gglabeller_data,mapping = aes(label = gglabeller_labels),
                    min.segment.length = unit(0.5, 'lines'), show.legend = FALSE,
                    box.padding = unit(0.25, 'lines'),point.padding = unit(1e-06, 'lines'))

@

<<tfRankOrderPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=4, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Two subpopulations of CMP and MEP cells were obtained by k-medoids clustering on ATAC principal components or g-ChromVAR enrichments, respectively. Rank-order plots showing transcription factor binding sites ranked by difference in chromVAR enrichment between the two clusters of (A) CMP and (B) MEP populations", eval = TRUE, cache = FALSE, results="hide">>=

library(qvalue)
library(ggrepel)
library(stringr)
jdb_color_maps2 <- c(jdb_color_maps, "Mega" = "#FF347E", "UNK" = "#8D91AD", "mDC"= "#FFD700", "MCP" = "#C390D4")
names(jdb_color_maps2)[9] <- "Mono"

TF_differences <- readRDS("../data/singlecell/scATAC/CMP_ATAC_TFzscore_differences_kmedoids.rds")
TF_differences$TF_name <- str_split_fixed(TF_differences$TF, "_",n=4)[,3]
TF_differences$FDR <- qvalue(TF_differences$pval)$qvalues

# Color the GATA TFs
idx <- grep("GATA",TF_differences$TF_name)
TF_differences$highlight<- "F"
TF_differences[idx,"highlight"] <- "T"

# Take the top TFs from TFs of interest
TFs_of_interest <- c("GATA1","KLF1","CEBPA","IRF8")
labelidx <- sapply(TFs_of_interest, function(y) {
  grep(paste("^",y,"$", sep=""), TF_differences$TF_name)[1]
})
TF_differences$toLabel <- "F"
TF_differences[labelidx,"toLabel"] <- TF_differences[labelidx,"TF_name"]

# Rank order plot
CMP <- ggplot(TF_differences,aes(x=rank,y=-log10(FDR))) + 
  geom_point(shape=21,size=3.5,aes(fill=highlight)) +
  pretty_plot() +
  scale_fill_manual(values = as.character(jdb_color_maps2[c("Mono","Ery")]),
                    labels=c("Other TFs", "GATA TFs")) +
  labs(x="Rank",y="-log10(FDR)") + 
  theme(legend.position = c(.95, .95),
        legend.justification = c("right", "top"),
        legend.margin = margin(6, 6, 6, 6),
        legend.title = element_blank(),
        legend.key = element_rect(fill = "white", colour = "black")) +
  guides(fill=guide_legend(reverse=TRUE)) +
  geom_text_repel(
    data = subset(TF_differences, toLabel!="F"),
    aes(label = toLabel),
    size = 2.5,
    nudge_y =3,
    nudge_x=150,
    point.padding=0.50,
    min.segment.length=0,
    segment.alpha=0.3,
    direction="both")

# MEPs
TFs_of_interest <- c("GATA1","KLF1","MEF2C")

TF_differences <- readRDS("../data/singlecell/scATAC/MEP_ATAC_TFzscore_differences_kmedoids.rds")

# Color the GATA TFs
idx <- grep("GATA",TF_differences$TF_name)
TF_differences$highlight<- "F"
TF_differences[idx,"highlight"] <- "T"

# Take the top TFs from TFs of interest
labelidx <- sapply(TFs_of_interest, function(y) {
  grep(paste("^",y,"$", sep=""), TF_differences$TF_name)[1]
})
TF_differences$toLabel <- "F"
TF_differences[labelidx,"toLabel"] <- TF_differences[labelidx,"TF_name"]

# Rank order plot
MEP <- ggplot(TF_differences,aes(x=rank,y=-log10(FDR))) + 
  geom_point(shape=21,size=3.5,aes(fill=highlight)) +
  pretty_plot() +
  scale_fill_manual(values = as.character(jdb_color_maps2[c("Mega","Ery")]),
                    labels=c("Other TFs", "GATA TFs")) +
  labs(x="Rank",y="-log10(FDR)") + 
  theme(legend.position = c(.95, .95),
        legend.justification = c("right", "top"),
        legend.margin = margin(6, 6, 6, 6),
        legend.title = element_blank(),
        legend.key = element_rect(fill = "white", colour = "black")) +
  guides(fill=guide_legend(reverse=TRUE)) +
  geom_text_repel(
    data = subset(TF_differences, toLabel!="F"),
    aes(label = toLabel),
    size = 2.5,
    nudge_y =0.5,
    nudge_x=100,
    point.padding=0.50,
    min.segment.length=0,
    segment.alpha=0.3,
    direction="both")

plot_grid(CMP, MEP, labels = c('A', 'B'), nrow = 1, rel_heights = c(1,1))
@

\end{document}