\documentclass{article}
\usepackage{enumitem}
\usepackage{ amssymb }
\usepackage{ textcomp }
\usepackage{longtable}
\usepackage{amsmath,tabu}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{float}
\usepackage[figurename=Supplemental Figure]{caption}
\usepackage{titling}

\setlength{\droptitle}{-5em}  
\topmargin=-0.4in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9in
\headsep=0.25in

\title{Interrogation of human hematopoietic traits at single-cell and single-variant resolution}
\date{Supplemental Information}
\author{(Caleb, Erik, Jacob), Will?, Hilary, Joel, (Martin, Jason, Vijay)}


\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\section*{Overview of UK Biobank data}
\begin{enumerate}[label=(\Alph*)]
\item 

<<loadLibraries, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, eval = TRUE, cache = FALSE, results="hide">>=
library(corrplot)
library(BuenColors)
library(dplyr)
library(reshape2)
library(cowplot)
library(data.table)
@

<<correlationPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Phenotypic and genetic correlations across the 16 traits examined. ", eval = TRUE, cache = TRUE, results="hide">>=

### Phenotypic correlations
phenocors <-read.table("../data/phenotypeCorrelations/raw_phenotypes.txt",header=TRUE,row.names=1)
dissimilarity <- 1 - cor(data.matrix(phenocors))
distance <- as.dist(dissimilarity) 
reorderedtraits=traits=rownames(phenocors)[hclust(distance)$order]

phenocors <- data.matrix(phenocors[reorderedtraits,reorderedtraits])
melt_pheno <- reshape2::melt(phenocors)
melt_pheno$Var1 <- ordered(as.character(melt_pheno$Var1), ordered(traits))
melt_pheno$Var2 <- ordered(as.character(melt_pheno$Var2), ordered(rev((traits))))

p1 <- ggplot(data = melt_pheno, aes(x=Var1, y=Var2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_flare"), limits = c(-1,1)) +
  theme(plot.subtitle = element_text(vjust = 1), 
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "Pearson") +
  theme(legend.position="bottom")  + ggtitle("Phenotype Correlation")

### Constrained intercept genetic correlations
constrained_gencors <- vector(mode = "list", length = length(traits))

# Read unix files into R lists
constrained_gencors <- lapply(traits, function(y) read.table(paste0("../data/phenotypeCorrelations/ldscore/",y,"_UK10K_constrained.gcsummary.txt"),header=TRUE,row.names=NULL))

make.gc.matrix <- function(list_of_gcs,traits){
  allgencors <- bind_rows(list_of_gcs)
  allgencors$rg <- as.numeric(as.character(allgencors$rg))
  
  gc.matrix <- matrix(ncol = 16, nrow = 16, dimnames=list(traits,traits))
  pv.matrix <- matrix(ncol = 16, nrow = 16, dimnames=list(traits,traits))
  
  for (i in traits) {
    for (j in traits) {
      if (i == j){
        gc.matrix[i,j]=1
      } else {
        gc.matrix[i,j] <- allgencors[allgencors$p1 == i & allgencors$p2 == j,'rg']
        if (gc.matrix[i,j]>1) gc.matrix[i,j]=1
        pv.matrix[i,j]<- allgencors[allgencors$p1 == i & allgencors$p2 == j,'p']
      }
    }
  }
  return(list(gc.matrix,pv.matrix))
}

# Plot LD Score correlation
ldscorecor <- make.gc.matrix(constrained_gencors,traits)[[1]]
melt_phenoLD <- reshape2::melt(ldscorecor)
melt_phenoLD$Var1 <- ordered(as.character(melt_phenoLD$Var1), ordered(traits))
melt_phenoLD$Var2 <- ordered(as.character(melt_phenoLD$Var2), ordered(rev((traits))))

p2 <- ggplot(data = melt_phenoLD, aes(x=Var1, y=Var2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_flare"), limits = c(-1,1)) +
  theme(plot.subtitle = element_text(vjust = 1), 
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "LDScore Correlation") +
  theme(legend.position="bottom")  + ggtitle("Genetic Correlation")


### Compare geno and pheno correlations
phenotriangle <- phenocors
phenotriangle[lower.tri(phenotriangle, diag = FALSE)]<- 0
genotriangle <- ldscorecor
genotriangle[lower.tri(genotriangle, diag = FALSE)]<- 0

phenomelt <- melt(phenotriangle); genomelt <- melt(genotriangle); allmelt <- melt(phenocors)

genomelt$traitpairs <- paste(genomelt$Var1,genomelt$Var2)
phenomelt$traitpairs <- paste(phenomelt$Var1,phenomelt$Var2)

colnames(genomelt)[3]<- "GenoCor"
colnames(phenomelt)[3] <- "PhenoCor"
merged <- merge(genomelt,phenomelt,by="traitpairs")
merged[,c("Var1.x","Var2.x")] <- NULL
merged <- merged[merged$GenoCor != 0,]

p3 <- ggplot(merged,aes(x=GenoCor,y=PhenoCor,pairs=traitpairs)) + geom_point(aes(color=Var1.y)) + 
  scale_color_manual(values = UKBB_color_maps) + 
  pretty_plot()+ geom_smooth(method=lm)+
  geom_abline(intercept=0,slope=1) + 
  theme(plot.title = element_text(size=10,hjust = 0.5,face="bold"),
        panel.background = element_rect(fill = "white", colour = "grey50"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  scale_x_continuous(limits = c(-1,1)) + scale_y_continuous(limits = c(-1,1))

 plot_grid(p1, p2, labels = c('A', 'B'))
@


<<pleiotropyImport, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Numbers of pleiotropic variants", eval = TRUE, cache = FALSE, results="hide">>=
 library(ggplot2)
 library(BuenColors)

 pleioMatch <- function(file1, file2){
   nnames <- c("chr", "start", "end", "region", "PP", "beta", "SE", "Z")
   # Import Bed and Make GRanges
   hitdf1 <- data.table::fread(as.character(file1))
   names(hitdf1) <- nnames 
   
   hitdf2 <- data.table::fread(as.character(file2))
   names(hitdf2) <- nnames 
   
   hitdf <- merge(hitdf1, hitdf2, by.x = c("chr", "start", "end"), by.y = c("chr", "start", "end"))
   oppo <- sum(sign(hitdf$beta.x) != sign(hitdf$beta.y))
   same <- sum(sign(hitdf$beta.x) == sign(hitdf$beta.y))
   return(c(oppo, same))
 }
 
 files <- list.files("../data/UKBB_BC_PP001/betas_added",  full.names = TRUE)
 pairs <- data.frame(t(combn(files, 2)), stringsAsFactors = FALSE)
 pairs$short1 <- gsub("_PP001_betas.bed", "", gsub("../data/UKBB_BC_PP001/betas_added/", "", pairs[,1]))
 pairs$short2 <- gsub("_PP001_betas.bed", "", gsub("../data/UKBB_BC_PP001/betas_added/", "", pairs[,2]))
 pairs$traits <- paste0(pairs$short1, "_", pairs$short2)
 
 hitsdf <- sapply(1:dim(pairs)[1], function(i){
   pleioMatch(pairs[i,1], pairs[i,2])
 })
 pairsdf <- data.frame(pairs, t(hitsdf))
 colnames(pairsdf) <- c(colnames(pairs), "opposite", "same")
 pairsdf <- pairsdf[,c("short1", "short2", "opposite", "same")]
 
melt_pleio <- reshape2::melt(pairsdf, id.vars = c("short1", "short2"))
melt_pleio$short1 <- ordered(as.character(melt_pleio$short1), ordered(traits))
melt_pleio$short2 <- ordered(as.character(melt_pleio$short2), ordered(rev((traits))))

mdf <- rbind(melt_pleio, setNames(melt_pleio[,c(2,1,3,4)], c("short1", "short2", "variable", "value")))
mdf$value[is.na(mdf$value)] <- 0
@

<<pleiotropyPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Numbers of pleiotropic variants", eval = TRUE, cache = FALSE, results="hide">>=
pleioplot1 <- ggplot(data = mdf[mdf$variable == "same", ], aes(x=short1, y=short2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_rojos")) +
  theme(plot.subtitle = element_text(vjust = 1), legend.text=element_text(size= 7),
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = "# of Variants") +
  theme(legend.position="bottom")  + ggtitle("Same sign")
 

pleioplot2 <- ggplot(data = mdf[mdf$variable == "opposite", ], aes(x=short1, y=short2, fill=value)) + pretty_plot() + 
  geom_tile() + scale_fill_gradientn(colors = jdb_palette("solar_blues")) +
  theme(plot.subtitle = element_text(vjust = 1),  legend.text=element_text(size= 7),
    plot.caption = element_text(vjust = 1), 
    axis.text.x = element_text(angle = 90)) +labs(x = NULL, y = NULL, fill = " # of Variants") +
  theme(legend.position="bottom")  + ggtitle("Opposite sign")
 plot_grid(pleioplot1, pleioplot2, labels = c('A', 'B'))
@

<<heritabilityPlots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=5, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Heritability estimates from LD Score Regression across 16 hematopoetic traits. The estimates of the narrow-sense SNP heritabilities are plotted in gray with their corresponding standard erors. Heritability estimates for all variants with fine mapped posterior probability > 0.001 are plotted in blue for each trait, and the proportions of total narrow-sense heritability captured by these fine mapped variants (blue bar / gray bar) are indicated by the numbered labels.", eval = TRUE, cache = FALSE, results="hide">>=

library(scales)
# Narrow-Sense Heritability Estimated Obtained from LDSC
h2 <-fread("../data/LDSC_heritability/trait_h2.txt")
colnames(h2) <- c("trait","h_obs","h_obs_se")

# Read in enrichments for FM PP001 variants
reorderedtraits=traits=c("BASO_COUNT","EO_COUNT","HCT","HGB","LYMPH_COUNT", "MCH", "MCHC", "MCV", "MEAN_RETIC_VOL","MONO_COUNT", "MPV", "NEUTRO_COUNT", "PLT_COUNT", "RBC_COUNT","RETIC_COUNT","WBC_COUNT")

ctHeme <- vector("list",length=16)
ct_enrichment <- vector("list",length=length(ctHeme))
celltypes <- paste0(traits,"_PP001L2")

FM_h2 <- NULL
FM_enrichment <- NULL
dir="../data/LDSC_heritability/FM_PP001/"
for (i in 1:length(ctHeme)){
  ctHeme[[i]]<-fread(paste0(dir,traits[i],".",celltypes[i],".results"))
  FM_h2[i] <- ctHeme[[i]]$Prop._h2[1]
  FM_enrichment[i] <- ctHeme[[i]]$Enrichment[1]
}

h2$fm_herit <- FM_h2*h2$h_obs
h2$fm_h2 <- FM_h2

legendtitle <- "Fine mapped heritability"
ggplot(data=h2, aes(x=trait,y=fm_herit)) +
  geom_bar(aes(y=h_obs), fill="light gray",stat="identity",position = position_stack(reverse = TRUE)) +
  geom_bar(aes(y=fm_herit,fill=legendtitle),stat="identity") +
  geom_text(aes(label=percent(FM_h2)), hjust=-0.25, color="black", size=3.25) +
  scale_fill_manual(values = c(jdb_palette("GrandBudapest2")[c(4)],jdb_palette("Zissou")[1:5])) +
  ggtitle("Finemapped Trait Heritabilities") + theme_bw() + 
  coord_flip() + 
  labs(fill="") + 
  scale_y_continuous(expand = c(0.01, 0.0)) +
  theme(plot.subtitle = element_text(vjust = 1),
        panel.background = element_rect(fill = "white", colour = "grey50"),
        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
        axis.title.y=element_blank(),
        axis.title.x=element_blank(),
        legend.position = c(.98, 0.99),
        legend.justification = c("right", "top"),
        legend.box.just = "right",
        legend.margin = margin(1, 1, 1, 1),
        legend.direction = "vertical",
        legend.key.size = unit(0.15, "in"))  +
  geom_errorbar(aes(ymin=h_obs-h_obs_se, ymax=h_obs+h_obs_se),width=.2,position=position_dodge(.9),color="black")

@

<<barplots, message = FALSE, warning = FALSE, echo = FALSE, fig.height=9, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Hematopoetic cell type enrichments for Mean Retic Volume and Monocyte count using various methods.", eval = TRUE, cache = FALSE, results="hide">>=
df3 <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
df3$LDScore <- -log10(df3$ldscore_pvalue)
df3$`g-chromVAR` <- -log10(pnorm(df3$weighted_Zscore, lower.tail = FALSE))
df3$chromVAR <- -log10(pnorm(df3$chromVAR_Zscore, lower.tail = FALSE))
plotdfEnrich2 <- reshape2::melt(df3[df3$Trait %in% c("MEAN_RETIC_VOL", "MONO_COUNT"),c(1,2,6,8,7)],
                                id.vars = c("Celltype", "Trait"))

pEnrich1 <- ggplot(plotdfEnrich2[plotdfEnrich2$Trait == "MONO_COUNT", ],
                   aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "Monocyte Count Enrichment (-log10 p)", fill = "") +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) +
   scale_fill_manual(values = ejc_color_maps) + facet_grid(variable ~ ., scales = "free_y") +
  theme(legend.position="none") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

pEnrich2 <- ggplot(plotdfEnrich2[plotdfEnrich2$Trait == "MEAN_RETIC_VOL", ],
                   aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) +
  pretty_plot() + labs(x = "", y = "Mean Retic Volume Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_grid(variable ~ ., scales = "free_y") +
  theme(legend.position="bottom") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

plot_grid(pEnrich1, pEnrich2, labels = c('A', 'B'), nrow = 2, rel_heights = c(1,1.3))
@

<<allGchromvar, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from g-chromVAR. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfg <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfg$`g-chromVAR` <- -log10(pnorm(dfg$weighted_Zscore, lower.tail = FALSE))
plotdfEnrichg <- reshape2::melt(dfg[,c(1,2,6)],
                                id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichg, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "g-chromVAR Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<allchromVAR, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from chromVAR. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfg <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfg$chromVAR <- -log10(pnorm(dfg$chromVAR_Zscore, lower.tail = FALSE))
plotdfEnrichg <- reshape2::melt(dfg[,c(1,2,6)],
                                id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichg, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "chromVAR Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<allLDscore, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="All enrichments from LD Score. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=

# Plot of all enrichments
dfldscore <- read.table("../data/bulk/GWAS-Bulk/compare3.tsv", header = TRUE)
dfldscore$ldscoreP<- -log10(dfldscore$ldscore_pvalue)
plotdfEnrichLDscore <- reshape2::melt(dfldscore[,c(1,2,6)], id.vars = c("Celltype", "Trait"))
ggplot(plotdfEnrichLDscore, aes(x = Celltype, y = value)) +
  geom_bar(width = 1, aes(fill = Celltype), colour="black",
           stat = "identity", position = position_dodge(width=1)) +
  pretty_plot() + labs(x = "", y = "LD Score Enrichment Enrichment (-log10 p)", fill = "") +
   scale_fill_manual(values = ejc_color_maps) + facet_wrap(~Trait, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
@

<<varyingPP, message = FALSE, warning = FALSE, echo = FALSE, fig.height=8, fig.align='center', fig.pos='H', fig.width=8, fig.cap="Cell type - trait enrichments for g-chromVAR across different finemap variants posterior probability cutoffs. The horizontal line shows a Bonferonni multiple testing adjusted threshold for statistical significance of enrichment.", eval = TRUE, cache = FALSE, results="hide">>=
zscoreWeighted <- readRDS("../data/supplement_rds/varyingPPcutoff.rds")
zscoreWeighted$Var2 <- gsub("_PP001", "", zscoreWeighted$Var2)
ggplot(zscoreWeighted, aes(x = PP, y = -log10(pnorm(value,lower.tail = FALSE)))) +
  geom_line(aes(color = Var1)) +
  pretty_plot() + labs(x = "Posterior Probability Threshold", y = "g-chromVAR Enrichment (-log10 p)", color = "") +
   scale_color_manual(values = ejc_color_maps) + facet_wrap(~Var2, scales = "free_y") +
  theme(legend.position="bottom") +
  geom_hline(yintercept = -log10(0.05 / (16*17)), linetype = 2) 

@
\item

\begin{figure}[H]
\centering
\includegraphics[width=\linewidth]{staticFigures/LDtoSentinel_PPcomparison.pdf}
\caption{Sample embedding of figure in document.}
\end{figure} 

\end{enumerate}


\end{document}